{"version":3,"sources":["makeData.js","App.js","serviceWorker.js","index.js"],"names":["range","len","arr","i","push","newPerson","team","namor","generate","words","numbers","winEfficiency","value2019_20","Math","floor","random","wins","rating2k","makeData","lens","makeDataLevel","depth","map","d","Styles","styled","div","Table","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","row","getRowProps","cells","cell","getCellProps","render","TeamsTable","React","useMemo","Header","accessor","Boolean","window","location","hostname","match","ReactDOM","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8iBAEMA,EAAQ,SAAAC,GAEZ,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,EAAIE,KAAKD,GAEX,OAAOD,GAGHG,EAAY,WAChB,MAAO,CACLC,KAAMC,IAAMC,SAAS,CAAEC,MAAO,EAAGC,QAAS,IAC1CC,cAAeJ,IAAMC,SAAS,CAAEC,MAAO,EAAGC,QAAS,IACnDE,aAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC9BC,KAAMH,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBE,SAAUJ,KAAKC,MAAsB,IAAhBD,KAAKE,YAIf,SAASG,IAAmB,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBACxC,IAAMC,EAAgB,WAAgB,IAAfC,EAAc,uDAAN,EACvBpB,EAAMkB,EAAKE,GACjB,OAAOrB,EAAMC,GAAKqB,KAAI,SAAAC,GACpB,OAAO,eACFlB,SAKT,OAAOe,I,qdCxBT,IAAMI,EAASC,IAAOC,IAAV,KA6BZ,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAO5BC,mBACF,CACEF,UACAC,QAEFE,aAVAC,EAF8B,EAE9BA,cACAC,EAH8B,EAG9BA,kBACAC,EAJ8B,EAI9BA,aACAC,EAL8B,EAK9BA,KACAC,EAN8B,EAM9BA,WASF,OACE,oCACA,+CACE,0BAAWJ,IACT,+BACE,+CACCE,EAAaZ,KAAI,SAAAe,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQjB,KAAI,SAAAkB,YAkB/B,0BAAWP,IACRE,EAAKb,KACJ,SAACmB,EAAKtC,GAEJ,OADAiC,EAAWK,GAET,uBAAQA,EAAIC,cACTD,EAAIE,MAAMrB,KAAI,SAAAsB,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKE,OAAO,kBAQ1D,8BAuFSC,MAlFf,WACE,IAAMnB,EAAUoB,IAAMC,SACpB,iBAAM,CACJ,CACEC,OAAQ,QACRtB,QAAS,CACP,CACEsB,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,iBACRC,SAAU,iBAEZ,CACED,OAAQ,gBACRC,SAAU,gBAEZ,CACED,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,YACRC,SAAU,iBAKlB,IAGItB,EAAOmB,IAAMC,SAAQ,kBAAM/B,EAAS,OAAO,IAEjD,OACE,kBAACM,EAAD,KACE,kBAACG,EAAD,CAAOC,QAASA,EAASC,KAAMA,MCzHjBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3755db6a.chunk.js","sourcesContent":["import namor from 'namor'\n\nconst range = len => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = () => {\n  return {\n    team: namor.generate({ words: 1, numbers: 0 }),\n    winEfficiency: namor.generate({ words: 1, numbers: 0 }),\n    value2019_20: Math.floor(Math.random() * 30),\n    wins: Math.floor(Math.random() * 100),\n    rating2k: Math.floor(Math.random() * 100),\n  }\n}\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson()\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useSortBy } from 'react-table'\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  )\n\n  return (\n    <>\n    <h1>Test heading :)</h1>\n      <table {...getTableProps()}>\n        <thead>\n          <h1>I'm in the head</h1>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                  })}\n                </tr>\n              )}\n          )}\n        </tbody>\n      </table>\n      <br />\n    </>\n  )\n}\n\nfunction TeamsTable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Teams',\n        columns: [\n          {\n            Header: 'Team',\n            accessor: 'team',\n          },\n          {\n            Header: 'Win Efficiency',\n            accessor: 'winEfficiency',\n          },\n          {\n            Header: '2019-20 Value',\n            accessor: 'value2019_20',\n          },\n          {\n            Header: 'Wins',\n            accessor: 'wins',\n          },\n          {\n            Header: '2K Rating',\n            accessor: 'rating2k',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const data = React.useMemo(() => makeData(2000), [])\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />\n    </Styles>\n  )\n}\n\nfunction PlayersTable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Players',\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Rating',\n            accessor: 'rating',\n          },\n          {\n            Header: '2019-20 Value',\n            accessor: 'value2019_20',\n          },\n          {\n            Header: 'Wins',\n            accessor: 'wins',\n          },\n          {\n            Header: '2K Rating',\n            accessor: 'rating2k',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const data = React.useMemo(() => makeData(2000), [])\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />\n    </Styles>\n  )\n}\n\nexport default TeamsTable\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}